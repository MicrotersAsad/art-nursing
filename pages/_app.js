import { useEffect, useState } from 'react';
import Script from 'next/script';
import Head from 'next/head';
import Navbar from './Navbar';
import Footer from './Footer';
import Banner from './Banner'; // Import your existing Banner component
import { AuthProvider, useAuth } from '../contexts/AuthContext';
import { useRouter } from 'next/router';
import '../styles/globals.css';
import { ClipLoader } from 'react-spinners';
import { FaArrowUp } from 'react-icons/fa'; // Import an arrow icon

function MyApp({ Component, pageProps }) {
  const [isContentReady, setIsContentReady] = useState(false);
  const router = useRouter();
  const isDashboard = router.pathname.startsWith('/dashboard'); // Check if the current route is dashboard
  const isLoginPage = router.pathname === '/login'; // Check if the current route is login

  useEffect(() => {
    // Load both Banner and Navbar content (dynamic/static)
    const loadNavbarAndBanner = async () => {
      try {
        // Simulating the loading of Navbar and Banner data
        await Promise.all([
          fetchNavbarData(), // Function to fetch Navbar data (e.g. user data, links)
          fetchBannerData(), // Function to fetch Banner data (e.g. promotions, messages)
        ]);
        // Once both Navbar and Banner are loaded, set content as ready
        setIsContentReady(true);
      } catch (error) {
        console.error("Error loading Navbar or Banner data:", error);
      }
    };

    loadNavbarAndBanner();
  }, []);

  // Placeholder functions simulating data fetching
  const fetchNavbarData = async () => {
    return new Promise((resolve) => {
      setTimeout(resolve, 1000); // Simulate 1 second load time for Navbar data
    });
  };

  const fetchBannerData = async () => {
    return new Promise((resolve) => {
      setTimeout(resolve, 1000); // Simulate 1 second load time for Banner data
    });
  };

  // Show loading spinner until both Banner and Navbar are fully loaded
  if (!isContentReady) {
    return (
      <div className="flex justify-center items-center h-screen">
        <ClipLoader size={80} color={"#36D7B7"} loading={true} />
      </div>
    );
  }

  return (
    <>
      <Head>
      <title>Art Nursing College</title>
        <meta name="Educational Website" content="Generated by Art Nursing College" />
        <meta name="description" content="Welcome to Art Nursing College, a world-class institution offering excellence in nursing education, practice, and research." />
        <meta name="keywords" content="Nursing, Art Nursing College, nursing education, healthcare, nursing practice" />
        <meta name="author" content="Art Nursing College Team" />

        {/* Open Graph / Facebook */}
        <meta property="og:type" content="website" />
        <meta property="og:title" content="Art Nursing College" />
        <meta property="og:description" content="Welcome to Art Nursing College, a world-class institution offering excellence in nursing education, practice, and research." />
        <meta property="og:image" content="https://artncedubd.com/uploads/art-banner.png" />
        <meta property="og:url" content="https://artncedubd.com/" />

        {/* Twitter */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content="Art Nursing College" />
        <meta name="twitter:description" content="Welcome to Art Nursing College, a world-class institution offering excellence in nursing education, practice, and research." />
        <meta name="twitter:image" content="https://artncedubd.com/uploads/art-banner.png" />
       
      </Head>

     

      <AuthProvider>
        {/* Render Navbar and Banner only if not in the dashboard */}
        {!isDashboard && (
          <>
            <Navbar />
            <Banner />
          </>
        )}

        <AuthGuard isDashboard={isDashboard} isLoginPage={isLoginPage}>
          <div className={isDashboard ? 'dashboard-container' : 'site-container'}>
            {/* Load the rest of the content */}
            <Component {...pageProps} />
            <BackToTopButton /> {/* Back to Top Button */}
          </div>
        </AuthGuard>

        {!isDashboard && <Footer />}
      </AuthProvider>
    </>
  );
}

// AuthGuard component for protecting routes and handling redirection
const AuthGuard = ({ children, isDashboard, isLoginPage }) => {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    console.log("User:", user);
    console.log("Loading:", loading);
    console.log("Current Route:", router.pathname);
  }, [loading, user, router]);

  useEffect(() => {
    if (loading) return; // If loading, don't do anything

    // Only redirect to dashboard if the user is on login page
    if (user && isLoginPage) {
      router.push('/dashboard/overview');
      return;
    }

    // Only redirect to login if the user is trying to access dashboard but is not logged in
    if (!user && isDashboard) {
      router.push('/login');
      return;
    }
  }, [loading, user, isDashboard, isLoginPage, router]);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <ClipLoader size={80} color={"#36D7B7"} loading={loading} />
      </div>
    );
  }

  return children;
};

// Back to Top Button component
const BackToTopButton = () => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // Show button when user scrolls down
    const toggleVisibility = () => {
      if (window.pageYOffset > 300) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    };

    window.addEventListener('scroll', toggleVisibility);

    return () => {
      window.removeEventListener('scroll', toggleVisibility);
    };
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  };

  return (
    <>
      {isVisible && (
        <button
          onClick={scrollToTop}
          className="fixed bottom-5 right-5 bg-indigo-600 text-white p-3 rounded-full shadow-lg hover:bg-indigo-700 focus:outline-none"
        >
          <FaArrowUp className="w-5 h-5" />
        </button>
      )}
    </>
  );
};

export default MyApp;
